name: Clojure Build with Test Image
on:
  workflow_call:
    inputs:
      runner:
        required: false
        type: string
        default: self-hosted
      target_branch:
        required: false
        type: string
        default: main
      test_file_path:
        required: true
        type: string
jobs:
  build:
    name: build
    uses: ./.github/workflows/clj-build.yml
    with:
      runner: ${{ inputs.runner }}
      target_branch: ${{ inputs.target_branch }}
    secrets: inherit

  test-image:
    name: build and push test image
    needs: build
    runs-on: ${{ inputs.runner }}
    steps:
      - name: build test image
        run: |
          docker build \
          -t ${{ needs.build.outputs.image }}_tests:${{ needs.build.outputs.branch_tag }} \
          -t ${{ needs.build.outputs.image }}_tests:${{ needs.build.outputs.version }} \
          --build-arg BUILD_NUMBER=${{ github.run_number }} \
          --build-arg BUILD_SHA=${{ needs.build.outputs.sha }} \
          --build-arg RP_PRIVATE_TOKEN=${{ secrets.GPR_TOKEN }} \
          --build-arg VERSION=${{ needs.build.outputs.version }} \
          --cache-from ${{ needs.build.outputs.image }}_tests:${{ needs.build.outputs.branch_tag }} \
          -f ${{ inputs.test_file_path }} .

      - name: push test image to docker registry
        run: |
          docker push ${{ needs.build.outputs.image }}_tests:${{ needs.build.outputs.branch_tag }}
          docker push ${{ needs.build.outputs.image }}_tests:${{ needs.build.outputs.version }}
          # reserve the `latest` tag for the master branch
          # branch-tags are essentially `latest` per branch
          if [[ ${{ contains(github.ref, 'master') }} = true ]]; then
            docker tag ${{ needs.build.outputs.image }}_tests:${{ needs.build.outputs.branch_tag }} ${{ needs.build.outputs.image }}_tests:latest
            docker push ${{ needs.build.outputs.image }}_tests:latest
          fi
