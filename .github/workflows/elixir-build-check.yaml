name: Elixir Build and Check
on:
  workflow_call:
    inputs:
      elixir-version:
        required: true
        type: string
      erlang-version:
        required: true
        type: string
      mix-env:
        required: false
        type: string
        default: dev
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
jobs:
  dependencies:
    name: Build and Cache Dependencies
    runs-on: ${{ inputs.runs-on }}
    outputs:
      cache-key-suffix: ${{ steps.build-cache-deps.outputs.cache-key-suffix }}
    steps:
      - id: build-cache-deps
        uses: rentpath/actions-services-elixir-deps@v1
        with:
          elixir-version: ${{ inputs.elixir-version }}
          erlang-version: ${{ inputs.erlang-version }}
          mix-env: ${{ inputs.mix-env }}
  credo:
    name: Credo
    needs: [dependencies]
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: rentpath/actions-services-elixir-deps@v1
        with:
          elixir-version: ${{ inputs.elixir-version }}
          erlang-version: ${{ inputs.erlang-version }}
          mix-env: ${{ inputs.mix-env }}
      - run: mix do compile --force, credo --strict
  dialyzer:
    name: Dialyzer
    needs: [dependencies]
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: rentpath/actions-services-elixir-deps@v1
        with:
          elixir-version: ${{ inputs.elixir-version }}
          erlang-version: ${{ inputs.erlang-version }}
          mix-env: ${{ inputs.mix-env }}
      - name: Cache PLT files
        uses: actions/cache@v3
        with:
          key: cache-plt_${{ needs.dependencies.outputs.cache-key-suffix }}
          path: |
            _build/dev/*.plt
            _build/dev/*.plt.hash
      - run: mix do compile --force, dialyzer
  dependency-audit:
    name: Dependency Audit
    needs: [dependencies]
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: rentpath/actions-services-elixir-deps@v1
        with:
          elixir-version: ${{ inputs.elixir-version }}
          erlang-version: ${{ inputs.erlang-version }}
          mix-env: ${{ inputs.mix-env }}
      - name: Check for unused dependencies
        if: always()
        run: mix deps.unlock --check-unused
      - name: Check for deprecated packages
        if: always()
        run: mix hex.audit
  xref:
    name: Xref
    needs: [dependencies]
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: rentpath/actions-services-elixir-deps@v1
        with:
          elixir-version: ${{ inputs.elixir-version }}
          erlang-version: ${{ inputs.erlang-version }}
          mix-env: ${{ inputs.mix-env }}
      - name: Check for circular dependencies
        run: mix xref graph --label compile-connected --fail-above 0
